# python3

from collections import namedtuple
DEBUG = False
Request = namedtuple("Request", ["arrived_at", "time_to_process"])
Response = namedtuple("Response", ["was_dropped", "started_at"])


class Buffer:
    def __init__(self, size):
        self.size = size
        self.finish_time = []

    def process(self, request):
            """
            Process a request and return the response.

            Args:
                request (Request): The request to be processed.

            Returns:
                Response: The response indicating whether the request was dropped and the time it was processed.
            """
            # check finish_time for requests that are older than the current request
            while len(self.finish_time) > 0 and self.finish_time[0] <= request.arrived_at:
                self.finish_time.pop(0)
            # if the buffer is full, drop the request
            if len(self.finish_time) == self.size:
                return Response(True, -1)
            # if the buffer is not full, process the request
            else:
                # if the buffer is empty, start processing the request immediately
                if len(self.finish_time) == 0:
                    self.finish_time.append(request.arrived_at + request.time_to_process)
                    return Response(False, request.arrived_at)
                # if the buffer is not empty, start processing the request after the last request in the buffer
                else:
                    self.finish_time.append(self.finish_time[-1] + request.time_to_process)
                    return Response(False, self.finish_time[-2])


def process_requests(requests, buffer):
    """
    Process a list of requests using a buffer.

    Args:
        requests (list): A list of requests to be processed.
        buffer (Buffer): An instance of the Buffer class.

    Returns:
        list: A list of responses generated by processing the requests.
    Examples:
        >>> process_requests([], Buffer(1))
        []
        >>> process_requests([Request(0, 0)], Buffer(1))
        [Response(was_dropped=False, started_at=0)]
        >>> process_requests([Request(0, 1), Request(0, 1)], Buffer(1))
        [Response(was_dropped=False, started_at=0), Response(was_dropped=True, started_at=-1)]
        >>> process_requests([Request(0, 1), Request(1, 1)], Buffer(1))
        [Response(was_dropped=False, started_at=0), Response(was_dropped=False, started_at=1)]
    """
    responses = []
    for request in requests:
        responses.append(buffer.process(request))
    return responses

# write test_cases
def test_cases():
    assert process_requests([], Buffer(1)) == []
    assert process_requests([Request(0, 0)], Buffer(1)) == [Response(was_dropped=False, started_at=0)]
    assert process_requests([Request(0, 1), Request(0, 1)], Buffer(1)) == [Response(was_dropped=False, started_at=0), Response(was_dropped=True, started_at=-1)]
    assert process_requests([Request(0, 1), Request(1, 1)], Buffer(1)) == [Response(was_dropped=False, started_at=0), Response(was_dropped=False, started_at=1)]
    print('All test cases passed.')


def main():
    buffer_size, n_requests = map(int, input().split())
    requests = []
    for _ in range(n_requests):
        arrived_at, time_to_process = map(int, input().split())
        requests.append(Request(arrived_at, time_to_process))

    buffer = Buffer(buffer_size)
    responses = process_requests(requests, buffer)

    for response in responses:
        print(response.started_at if not response.was_dropped else -1)


if __name__ == "__main__":
    if DEBUG:
        test_cases()
    else:
        main()
